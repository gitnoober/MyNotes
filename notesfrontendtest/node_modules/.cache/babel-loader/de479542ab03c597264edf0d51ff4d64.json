{"ast":null,"code":"var _jsxFileName = \"/home/ps/Documents/notestest/notesfrontendtest/src/context/AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from \"react\";\nimport jwt_decode from \"jwt-decode\";\nimport { useHistory, Redirect } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport default AuthContext;\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  let [authTokens, setauthTokens] = useState(() => localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) : null);\n  let [user, setUser] = useState(() => localStorage.getItem('authTokens') ? jwt_decode(localStorage.getItem('authTokens')) : null);\n  let [loading, setloading] = useState(true);\n  const history = useHistory();\n\n  let loginUser = async e => {\n    e.preventDefault(); // console.log('Form submitted')\n\n    let response = await fetch('http://127.0.0.1:8000/api/token/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'username': e.target.username.value,\n        'password': e.target.password.value\n      })\n    });\n    console.log(response, \"response of login user\");\n\n    if (response.ok) {\n      let data = await response.json();\n      setauthTokens(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem('authTokens', JSON.stringify(data));\n      history.push('/'); // console.log('data:', data)\n      // console.log(\"response:\" , response);\n      // console.log(\"userrr\", user)\n    } else {\n      alert('Something went wrong!');\n    } // console.log('data:', response)\n\n  };\n\n  let logoutUser = () => {\n    setauthTokens(null);\n    setUser(null);\n    localStorage.removeItem('authTokens');\n    history.push('/login');\n  };\n\n  let updateToken = async () => {\n    console.log('Update Token Called');\n    let response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'refresh': authTokens === null || authTokens === void 0 ? void 0 : authTokens.refresh\n      })\n    });\n\n    if (response.status === 200) {\n      let data = await response.json();\n      setauthTokens(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem('authTokens', JSON.stringify(data));\n    } else {\n      logoutUser();\n    }\n\n    if (loading) {\n      setloading(false);\n    }\n  };\n\n  let registerUser = async e => {\n    e.preventDefault();\n    let response = await fetch('http://127.0.0.1:8000/api/register/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'username': e.target.username.value,\n        'password': e.target.password1.value,\n        'password2': e.target.password2.value\n      })\n    });\n    let data = await response.json();\n\n    if (response.status === 201) {\n      toast.success('User Registered');\n      history.push('/');\n    } else {\n      // console.log(data.password, \"data\")\n      for (let i = 0; i < data.password.length; i++) {\n        toast.error(data.password[i]);\n      } // toast.error('Password must be strong!')\n\n    }\n  };\n\n  let contextData = {\n    user: user,\n    authTokens: authTokens,\n    loginUser: loginUser,\n    logoutUser: logoutUser,\n    registerUser: registerUser\n  };\n  useEffect(() => {\n    if (loading) {\n      updateToken();\n    }\n\n    let fourmin = 1000 * 60 * 4;\n    let interval = setInterval(() => {\n      if (authTokens) {\n        updateToken();\n      }\n    }, fourmin); // console.log(\"called\")\n\n    return () => clearInterval(interval);\n  }, [authTokens, loading]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthProvider, \"E7YH6NTtLj31z1FctcU3P/CqZwU=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/home/ps/Documents/notestest/notesfrontendtest/src/context/AuthContext.js"],"names":["createContext","useState","useEffect","jwt_decode","useHistory","Redirect","toast","AuthContext","AuthProvider","children","authTokens","setauthTokens","localStorage","getItem","JSON","parse","user","setUser","loading","setloading","history","loginUser","e","preventDefault","response","fetch","method","headers","body","stringify","target","username","value","password","console","log","ok","data","json","access","setItem","push","alert","logoutUser","removeItem","updateToken","refresh","status","registerUser","password1","password2","success","i","length","error","contextData","fourmin","interval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\nimport jwt_decode from \"jwt-decode\";\nimport { useHistory, Redirect } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nconst AuthContext = createContext()\n\nexport default AuthContext;\n\n\nexport const AuthProvider =({children}) => {\n\n    let [authTokens, setauthTokens] = useState(()=>localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) : null)\n    let [user, setUser] = useState(()=>localStorage.getItem('authTokens') ? jwt_decode(localStorage.getItem('authTokens')) : null)\n    let [loading, setloading] = useState(true)\n\n    const history = useHistory()\n\n    let loginUser = async (e) => {\n        e.preventDefault()\n        // console.log('Form submitted')\n        let response = await fetch('http://127.0.0.1:8000/api/token/', {\n            method : 'POST',\n            headers : {\n                'Content-Type':'application/json'\n            },\n            body : JSON.stringify({'username':e.target.username.value, 'password':e.target.password.value})\n\n        })\n        console.log(response , \"response of login user\")\n        if (response.ok){\n            let data = await response.json()\n            setauthTokens(data)\n            setUser(jwt_decode(data.access))\n            localStorage.setItem('authTokens',JSON.stringify(data))\n            history.push('/')\n            // console.log('data:', data)\n            // console.log(\"response:\" , response);\n            // console.log(\"userrr\", user)\n        } else {\n            alert('Something went wrong!')\n            \n        }\n        // console.log('data:', response)\n    }\n\n    let logoutUser = () => {\n        setauthTokens(null)\n        setUser(null)\n        localStorage.removeItem('authTokens')\n        history.push('/login')\n    }\n\n    let updateToken = async () => {\n        console.log('Update Token Called')\n        let response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\n            method : 'POST',\n            headers : {\n                'Content-Type':'application/json'\n            },\n            body : JSON.stringify({'refresh': authTokens?.refresh})\n        })\n        if (response.status === 200) {\n            let data = await response.json()\n            setauthTokens(data)\n            setUser(jwt_decode(data.access))\n            localStorage.setItem('authTokens', JSON.stringify(data))\n        }else{\n            logoutUser()\n        }\n\n        if(loading){\n            setloading(false)\n        }\n    }\n\n    let registerUser = async (e) => {\n        e.preventDefault();\n        let response = await fetch('http://127.0.0.1:8000/api/register/', {\n            method: 'POST',\n            headers : {\n                'Content-Type' : 'application/json',\n            },\n            body : JSON.stringify({'username': e.target.username.value, 'password': e.target.password1.value, 'password2': e.target.password2.value})\n        })\n        let data = await response.json()\n        if (response.status === 201){\n            toast.success('User Registered')\n            history.push('/')\n        }else{\n            // console.log(data.password, \"data\")\n            for (let i = 0; i < data.password.length;i++){\n                toast.error(data.password[i])\n            }\n            // toast.error('Password must be strong!')\n            \n        }\n        \n        \n    }\n\n\n    let contextData = {\n        user:user,\n        authTokens:authTokens,\n        loginUser:loginUser,\n        logoutUser:logoutUser,\n        registerUser:registerUser,\n    }\n\n\n    useEffect(()=>{\n\n        if (loading){\n            updateToken()\n\n        }\n\n        let fourmin = 1000 * 60 * 4\n        let interval = setInterval(()=> {\n            if (authTokens){\n                updateToken()\n            }\n        },fourmin)\n        // console.log(\"called\")\n        return ()=> clearInterval(interval)\n    }, [authTokens, loading])\n\n\n    return (\n        <AuthContext.Provider value={contextData} >\n            {children}\n        </AuthContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}
