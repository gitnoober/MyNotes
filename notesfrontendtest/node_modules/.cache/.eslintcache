[{"/home/ps/Documents/notestest/notesfrontendtest/src/index.js":"1","/home/ps/Documents/notestest/notesfrontendtest/src/App.js":"2","/home/ps/Documents/notestest/notesfrontendtest/src/pages/HomePage.js":"3","/home/ps/Documents/notestest/notesfrontendtest/src/pages/LoginPage.js":"4","/home/ps/Documents/notestest/notesfrontendtest/src/pages/ResgisterPage.js":"5","/home/ps/Documents/notestest/notesfrontendtest/src/pages/NotePage.js":"6","/home/ps/Documents/notestest/notesfrontendtest/src/components/Header.js":"7","/home/ps/Documents/notestest/notesfrontendtest/src/utils/PrivateRoute.js":"8","/home/ps/Documents/notestest/notesfrontendtest/src/context/AuthContext.js":"9","/home/ps/Documents/notestest/notesfrontendtest/src/components/ListItem.js":"10","/home/ps/Documents/notestest/notesfrontendtest/src/components/AddButton.js":"11"},{"size":199,"mtime":1643463873373,"results":"12","hashOfConfig":"13"},{"size":1051,"mtime":1643726866571,"results":"14","hashOfConfig":"13"},{"size":1312,"mtime":1643641950937,"results":"15","hashOfConfig":"13"},{"size":1399,"mtime":1643719867820,"results":"16","hashOfConfig":"13"},{"size":2270,"mtime":1643719568162,"results":"17","hashOfConfig":"13"},{"size":2862,"mtime":1643715416404,"results":"18","hashOfConfig":"13"},{"size":613,"mtime":1643726255469,"results":"19","hashOfConfig":"13"},{"size":416,"mtime":1643564179264,"results":"20","hashOfConfig":"13"},{"size":4228,"mtime":1643726166338,"results":"21","hashOfConfig":"13"},{"size":866,"mtime":1643715753234,"results":"22","hashOfConfig":"13"},{"size":308,"mtime":1643641790945,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"10quq46",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"27"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"27"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"27"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"/home/ps/Documents/notestest/notesfrontendtest/src/index.js",[],[],["62","63"],"/home/ps/Documents/notestest/notesfrontendtest/src/App.js",[],[],"/home/ps/Documents/notestest/notesfrontendtest/src/pages/HomePage.js",["64"],[],"import React, {useState, useEffect, useContext} from 'react';\nimport AuthContext from '../context/AuthContext';\nimport ListItem from '../components/ListItem';\nimport AddButton from '../components/AddButton';\n\nconst HomePage = () => {\n\n  let [notes, setNotes] = useState([])\n  let {authTokens, logoutUser} = useContext(AuthContext)\n\n  useEffect(()=>{\n    getNotes()\n  }, [])\n\n  let getNotes = async() => {\n    let response = await fetch('/api/notes/', {\n      method:'GET',\n      headers:{\n        'Content-Type' : 'application/json',\n        'Authorization' : 'Bearer ' + String(authTokens.access)\n      }\n    })\n    let data = await response.json()\n    if (response.status === 200){\n      setNotes(data)  \n    }else if (response.statusText === 'Unauthorized'){\n      logoutUser()\n    }\n    else{\n      alert('Something went wrong')\n    }\n  }\n\n\n  \n  return (\n    <div className='notes'>\n        <div className='notes-header'>\n          <h2 className='notes-title' >&#9782; Notes</h2>\n          <p className='notes-count'>{notes.length}</p>\n        </div>\n\n        <div className='notes-list'>\n          {notes.map((note,index) => (\n            <ListItem key={index} note={note}/>\n          ))}\n        </div>\n        \n        <div>\n          <AddButton/>\n        </div>\n    </div>);\n};\n\nexport default HomePage;\n","/home/ps/Documents/notestest/notesfrontendtest/src/pages/LoginPage.js",[],[],"/home/ps/Documents/notestest/notesfrontendtest/src/pages/ResgisterPage.js",["65","66"],[],"import React, {useContext, Component} from 'react';\nimport AuthContext from '../context/AuthContext';\nimport { Redirect, Link } from 'react-router-dom';\n\n\n// const RegisterPage = () => {\n//   let {registerUser, user} =useContext(AuthContext)\n//   if (!user){\n//     return <div>\n//         <form onSubmit={registerUser}>\n//             <input type=\"text\" name=\"username\" placeholder='Enter Username' />\n//             <input type=\"password\" name=\"password1\" placeholder='Enter Password' />\n//             <input type=\"password\" name=\"password2\" placeholder='Confirm Password' />\n//             <button type=\"submit\" value=\"login\">Submit</button> \n//         </form>\n//     </div>;\n//   }\n//   else{\n//       <Redirect to=\"/\" />\n//   }\n// };\n\n// export default RegisterPage;\n\nconst RegisterPage =()=>{\n  let {registerUser} =useContext(AuthContext)\n  return (\n    <div className='formCenter'>\n      <form onSubmit={registerUser} className='formFields'>\n        <div className='formField'>\n          <label className='formFieldLabel' htmlFor=\"name\">\n            Username\n          </label>\n          <input\n          type=\"text\"\n          id=\"name\"\n          className='formFieldInput'\n          placeholder='Enter Username'\n          name=\"username\"\n          />\n        </div>\n\n        <div className='formField'>\n          <label className='formFieldLabel' htmlFor=\"password\">\n            Password\n          </label>\n          <input\n          type=\"password\"\n          id=\"password\"\n          className='formFieldInput'\n          placeholder='Enter Password'\n          name=\"password1\"\n          />\n        </div>\n        \n        <div className='formField'>\n          <label className='formFieldLabel' htmlFor=\"password\">\n            Re-Enter Password\n          </label>\n          <input\n          type=\"password\"\n          id=\"password\"\n          className='formFieldInput'\n          placeholder='Enter Password'\n          name=\"password2\"\n          />\n        </div>\n        \n        <div className=\"formField\">\n            <button className=\"formFieldButton\">Sign Up</button>{\" \"}\n            <Link to=\"/login\" className=\"formFieldLink\">\n              Have an account?\n            </Link>\n\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default RegisterPage;","/home/ps/Documents/notestest/notesfrontendtest/src/pages/NotePage.js",["67","68","69"],[],"import React, { useState, useEffect, useContext } from 'react';\nimport AuthContext from '../context/AuthContext';\nimport { ReactComponent as ArrowLeft } from '../assets/arrow-left.svg'\nimport { Link } from 'react-router-dom';\n\n\nconst NotePage = ({ match, history }) => {\n    \n    let {authTokens} = useContext(AuthContext)\n    let noteIdd = match.params.id\n    let [noteId, setNoteId] = useState(noteIdd)\n    let [note, setNote] = useState(null)\n\n    let getNote = async ()=> {\n        if (noteId === 'new'){\n            var response = await fetch('/api/notes/new/', {\n                method : 'POST',\n                headers : {\n                    'Content-Type' : 'application/json',\n                    'Authorization' : 'Bearer ' + String(authTokens.access)\n                }\n            })\n        }\n        else {\n            var response = await fetch(`/api/notes/${noteId}/`, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization' : 'Bearer ' + String(authTokens.access)\n\n                }\n            })\n        }\n        let data = await response.json()\n        setNote(data)\n        if (noteId === 'new'){\n            setNoteId(data.id)\n        }\n        console.log(\"get note function invoked\", note)\n    }\n    \n\n    let updateNote = async ()=> {\n        fetch(`/api/notes/${noteId}/update/`,{\n            method : 'PUT',\n            headers: {\n                'Content-Type' : 'application/json',\n                'Authorization' : 'Bearer ' + String(authTokens.access)\n            },\n            body:JSON.stringify(note)\n        })\n    }\n\n    useEffect(()=>{\n        getNote()\n    }, [noteId])\n\n    let deleteNote = async ()=>{\n        fetch(`/api/notes/${noteId}/delete/`,{\n            method:'DELETE',\n            headers:{\n                'Content-Type' : 'application/json',\n                'Authorization' : 'Bearer ' + String(authTokens.access)\n            }\n        })\n        history.push('/')\n    }\n\n\n    let handleSubmit = ()=>{\n        if (!note.body){\n            deleteNote()\n        } else {\n            updateNote()    \n        }\n        history.push('/')\n    }\n\n    let handleChange = (value) => {\n        setNote(note => ({ ...note, 'body': value}))\n        console.log('Handle change:', note)\n    }\n\n\n    if(!note){\n        return <div>\n        </div>\n    }\n    else{\n        return(\n            <div className='note'>\n                <div className='note-header'>\n                    <h3>\n                        <ArrowLeft onClick={handleSubmit} />\n                    </h3>\n                    \n                    <button onClick={deleteNote}>Delete</button>\n                </div>\n                <textarea onChange={(e) => { handleChange(e.target.value) }} value={note?.body}></textarea>\n            </div>\n        )\n    }\n    \n};\n\nexport default NotePage;\n","/home/ps/Documents/notestest/notesfrontendtest/src/components/Header.js",[],[],"/home/ps/Documents/notestest/notesfrontendtest/src/utils/PrivateRoute.js",[],[],"/home/ps/Documents/notestest/notesfrontendtest/src/context/AuthContext.js",["70","71"],[],"import { createContext, useState, useEffect } from \"react\";\nimport jwt_decode from \"jwt-decode\";\nimport { useHistory, Redirect } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nconst AuthContext = createContext()\n\nexport default AuthContext;\n\n\nexport const AuthProvider =({children}) => {\n\n    let [authTokens, setauthTokens] = useState(()=>localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) : null)\n    let [user, setUser] = useState(()=>localStorage.getItem('authTokens') ? jwt_decode(localStorage.getItem('authTokens')) : null)\n    let [loading, setloading] = useState(true)\n\n    const history = useHistory()\n\n    let loginUser = async (e) => {\n        e.preventDefault()\n        // console.log('Form submitted')\n        let response = await fetch('http://127.0.0.1:8000/api/token/', {\n            method : 'POST',\n            headers : {\n                'Content-Type':'application/json'\n            },\n            body : JSON.stringify({'username':e.target.username.value, 'password':e.target.password.value})\n\n        })\n        console.log(response , \"response of login user\")\n        if (response.ok){\n            let data = await response.json()\n            setauthTokens(data)\n            setUser(jwt_decode(data.access))\n            localStorage.setItem('authTokens',JSON.stringify(data))\n            history.push('/')\n            // console.log('data:', data)\n            // console.log(\"response:\" , response);\n            // console.log(\"userrr\", user)\n        } else {\n            alert('Something went wrong!')\n            \n        }\n        // console.log('data:', response)\n    }\n\n    let logoutUser = () => {\n        setauthTokens(null)\n        setUser(null)\n        localStorage.removeItem('authTokens')\n        history.push('/login')\n    }\n\n    let updateToken = async () => {\n        console.log('Update Token Called')\n        let response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\n            method : 'POST',\n            headers : {\n                'Content-Type':'application/json'\n            },\n            body : JSON.stringify({'refresh': authTokens?.refresh})\n        })\n        if (response.status === 200) {\n            let data = await response.json()\n            setauthTokens(data)\n            setUser(jwt_decode(data.access))\n            localStorage.setItem('authTokens', JSON.stringify(data))\n        }else{\n            logoutUser()\n        }\n\n        if(loading){\n            setloading(false)\n        }\n    }\n\n    let registerUser = async (e) => {\n        e.preventDefault();\n        let response = await fetch('http://127.0.0.1:8000/api/register/', {\n            method: 'POST',\n            headers : {\n                'Content-Type' : 'application/json',\n            },\n            body : JSON.stringify({'username': e.target.username.value, 'password': e.target.password1.value, 'password2': e.target.password2.value})\n        })\n        let data = await response.json()\n        if (response.status === 201){\n            toast.success('User Registered')\n            history.push('/')\n        }else{\n            try {\n                for (let i = 0; i < data.password.length;i++){\n                    toast.error(data.password[i])\n                }\n            } catch (e){\n                \n            }\n            try {\n                if (data.username.length > 0){\n                    toast.error('Username must be unique!')    \n                }\n            } catch (e){\n\n            }\n            \n            \n        }\n        \n        \n    }\n\n\n    let contextData = {\n        user:user,\n        authTokens:authTokens,\n        loginUser:loginUser,\n        logoutUser:logoutUser,\n        registerUser:registerUser,\n    }\n\n\n    useEffect(()=>{\n\n        if (loading){\n            updateToken()\n\n        }\n\n        let fourmin = 1000 * 60 * 4\n        let interval = setInterval(()=> {\n            if (authTokens){\n                updateToken()\n            }\n        },fourmin)\n        // console.log(\"called\")\n        return ()=> clearInterval(interval)\n    }, [authTokens, loading])\n\n\n    return (\n        <AuthContext.Provider value={contextData} >\n            {children}\n        </AuthContext.Provider>\n    )\n}","/home/ps/Documents/notestest/notesfrontendtest/src/components/ListItem.js",[],[],"/home/ps/Documents/notestest/notesfrontendtest/src/components/AddButton.js",[],[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":13,"column":6,"nodeType":"78","endLine":13,"endColumn":8,"suggestions":"79"},{"ruleId":"80","severity":1,"message":"81","line":1,"column":28,"nodeType":"82","messageId":"83","endLine":1,"endColumn":37},{"ruleId":"80","severity":1,"message":"84","line":3,"column":10,"nodeType":"82","messageId":"83","endLine":3,"endColumn":18},{"ruleId":"80","severity":1,"message":"85","line":4,"column":10,"nodeType":"82","messageId":"83","endLine":4,"endColumn":14},{"ruleId":"86","severity":1,"message":"87","line":25,"column":17,"nodeType":"82","messageId":"88","endLine":25,"endColumn":25},{"ruleId":"76","severity":1,"message":"89","line":55,"column":8,"nodeType":"78","endLine":55,"endColumn":16,"suggestions":"90"},{"ruleId":"80","severity":1,"message":"84","line":3,"column":22,"nodeType":"82","messageId":"83","endLine":3,"endColumn":30},{"ruleId":"76","severity":1,"message":"91","line":136,"column":8,"nodeType":"78","endLine":136,"endColumn":29,"suggestions":"92"},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getNotes'. Either include it or remove the dependency array.","ArrayExpression",["95"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'Link' is defined but never used.","no-redeclare","'response' is already defined.","redeclared","React Hook useEffect has a missing dependency: 'getNote'. Either include it or remove the dependency array.",["96"],"React Hook useEffect has a missing dependency: 'updateToken'. Either include it or remove the dependency array.",["97"],"no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},"Update the dependencies array to be: [getNotes]",{"range":"104","text":"105"},"Update the dependencies array to be: [getNote, noteId]",{"range":"106","text":"107"},"Update the dependencies array to be: [authTokens, loading, updateToken]",{"range":"108","text":"109"},[370,372],"[getNotes]",[1665,1673],"[getNote, noteId]",[4076,4097],"[authTokens, loading, updateToken]"]